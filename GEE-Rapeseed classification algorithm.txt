var srtm = ee.Image("USGS/SRTMGL1_003"),
    l9_sr = ee.ImageCollection("LANDSAT/LC09/C02/T1_L2"),
    l8_sr = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2"),
    l7_sr = ee.ImageCollection("LANDSAT/LE07/C02/T1_L2"),
    l5_sr = ee.ImageCollection("LANDSAT/LT05/C02/T1_L2"),
    China_grid = ee.FeatureCollection("projects/ee-landsat-mapping2/assets/China_9degreeGrid_clip"),
    Allsamples = ee.FeatureCollection("projects/ee-landsat-mapping2/assets/AllSamplesMergedSelected");
// Show the study area
// Map.centerObject(roi);
Map.addLayer(China_grid, {color: "gray"}, "China_grid",false); 
// -------------------------------------Function----------- ---------------------------
// Add a cloud score band.  It is automatically called 'cloud'.
var scored = ee.Algorithms.Landsat.simpleCloudScore(cloudy_scene);
// Create a mask from the cloud score and combine it with the image mask.
var mask = scored.select(['cloud']).lte(20);

// Harmonization
var coefficients = {
  itcps: ee.Image.constant([0.0003, 0.0088, 0.0061, 0.0412, 0.0254, 0.0172]),
  slopes: ee.Image.constant([0.8474, 0.8483, 0.9047, 0.8462, 0.8937, 0.9071])
};

// Function to get and rename bands of interest from OLI. 
function renameOli(img) {
  return img.select(
      ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7'], 
      ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2']);
}

// Function to get and rename bands of interest from TM and ETM+.
function renameTm(img) { 
  return img.select(
      ['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7'],
      ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2']);
}

// Define the transformation function, which applies the linear model to ETM+ data
function TmtoOli(img) {
  return img.select(['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2'])
      .multiply(coefficients.slopes)
      .add(coefficients.itcps);
}

// Define function to prepare ETM+ images.
function prepTm(img) {
  var orig = img;
  img = renameTm(img);
  img = TmtoOli(img);
  img = img.toFloat();
  return ee.Image(img.copyProperties(orig, orig.propertyNames()));
}

// Define function to prepare OLI images.
function prepOli(img) {
  var orig = img;
  img = renameOli(img);
  img = img.toFloat();
  return ee.Image(img.copyProperties(orig, orig.propertyNames()));
}

//Count cloud-free pixel
var cloudfreePixel=function(image){
  //var imageData0 = image.clip(g1);  
  // var imageData0=imageData.updateMask(imageData.select('B2').lte(1500));
  var qa = image.select('Blue');
  var cloud_temp=qa.where(qa.lt(0.2),1);
  var cloudfree=cloud_temp.where(qa.gte(0.2),0);
  return cloudfree;
};

// A function that scales and masks Landsat 5/7 (C2) surface reflectance images.
function prepSrL57(image) {
  // Develop masks for unwanted pixels (fill, cloud, cloud shadow).
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  // Apply the scaling factors to the appropriate bands.
  var getFactorImg = function(factorNames) {
    var factorList = image.toDictionary().select(factorNames).values();
    return ee.Image.constant(factorList);
  };
  var scaleImg = getFactorImg([
    'REFLECTANCE_MULT_BAND_.|TEMPERATURE_MULT_BAND_ST_B6']);
  var offsetImg = getFactorImg([
    'REFLECTANCE_ADD_BAND_.|TEMPERATURE_ADD_BAND_ST_B6']);
  var scaled = image.select('SR_B.|ST_B6').multiply(scaleImg).add(offsetImg);

  // Replace original bands with scaled bands and apply masks.
  return image.addBands(scaled, null, true)
    .updateMask(qaMask).updateMask(saturationMask);
}

// A function that scales and masks Landsat 8 (C2) surface reflectance images.
function prepSrL8(image) {
  // Develop masks for unwanted pixels (fill, cloud, cloud shadow).
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  // Apply the scaling factors to the appropriate bands.
  var getFactorImg = function(factorNames) {
    var factorList = image.toDictionary().select(factorNames).values();
    return ee.Image.constant(factorList);
  };
  var scaleImg = getFactorImg([
    'REFLECTANCE_MULT_BAND_.|TEMPERATURE_MULT_BAND_ST_B10']);
  var offsetImg = getFactorImg([
    'REFLECTANCE_ADD_BAND_.|TEMPERATURE_ADD_BAND_ST_B10']);
  var scaled = image.select('SR_B.|ST_B10').multiply(scaleImg).add(offsetImg);

  // Replace original bands with scaled bands and apply masks.
  return image.addBands(scaled, null, true)
    .updateMask(qaMask).updateMask(saturationMask);
}

//calculate NDVI
function addNDVI(image) {
 var ndvi = image.normalizedDifference(['NIR','Red']).float().rename('NDVI');
 return image.addBands(ndvi);
}
//calculate WRI
function addWRI(image) {
 var blue = image.select("Blue");
 var green = image.select("Green");
 var red = image.select("Red");
 var nir = image.select("NIR");
 var wri = image.expression(
   "((B8 - B3)/(B8 + B3))*(B2/(B3+B4))",
   {
     "B8": nir,
     "B4": red,
     "B3": green,
     "B2": blue
   }
 );
 return image.addBands(wri.rename("WRI"));
}
// Calculate CI
function addCI(image) {
 var green = image.select("Green");
 var red = image.select("Red");
 var nir = image.select("NIR");
 var ci = image.expression(
   "B8 *(B3+B4)",
   {
     "B8": nir,
     "B4": red,
     "B3": green,
   }
 );
 return image.addBands(ci.rename("CI"));
}

//--------------------------------------------------------------------------------------------------
// Monthly median composite
var all_samples=Allsamples;
var trainingData0=all_samples.filter(ee.Filter.eq('Id',0));
var trainingData1=all_samples.filter(ee.Filter.eq('Id',1));
var trainingData2=all_samples.filter(ee.Filter.eq('Id',2));
var trainingData3=all_samples.filter(ee.Filter.eq('Id',3));
var trainingData4=all_samples.filter(ee.Filter.eq('Id',4));
var trainingData5=all_samples.filter(ee.Filter.eq('Id',5));
var trainingData6=all_samples.filter(ee.Filter.eq('Id',6));
var c1=ee.Number(trainingData1.size());
print(c1,'trainingData0 number');

var tp2=China_grid.sort('Id');
//print(tp1,'tp1');

var tp_list=ee.FeatureCollection(tp2).toList(25);
//print(tp_list,'tp_list');

var fcs=['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2','WRI','NDVI','CI','class'];
var slope=ee.Terrain.slope(srtm).clip(China_grid);
var bands=['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2','WRI','NDVI','CI'];

  //--------------------------------------------------------------------------------------
// //------------------------------------RF classifier
var rfclassifier0 = ee.Classifier.smileRandomForest(100).setOutputMode('PROBABILITY')
                  .train({features: trainingData0,classProperty: 'class',inputProperties: bands});
var rfclassifier1 = ee.Classifier.smileRandomForest(100).setOutputMode('PROBABILITY')
                  .train({features: trainingData1,classProperty: 'class',inputProperties: bands});
var rfclassifier2 = ee.Classifier.smileRandomForest(100).setOutputMode('PROBABILITY')
                  .train({features: trainingData2,classProperty: 'class',inputProperties: bands});
var rfclassifier3 = ee.Classifier.smileRandomForest(100).setOutputMode('PROBABILITY')
                  .train({features: trainingData3,classProperty: 'class',inputProperties: bands});
var rfclassifier4 = ee.Classifier.smileRandomForest(100).setOutputMode('PROBABILITY')
                  .train({features: trainingData4,classProperty: 'class',inputProperties: bands});
var rfclassifier5 = ee.Classifier.smileRandomForest(100).setOutputMode('PROBABILITY')
                  .train({features: trainingData5,classProperty: 'class',inputProperties: bands});
var rfclassifier6 = ee.Classifier.smileRandomForest(100).setOutputMode('PROBABILITY')
                  .train({features: trainingData6,classProperty: 'class',inputProperties: bands});

for (var j=1999;j<2023;j++) {
  var aDate = ee.Date.fromYMD(ee.Number(j),10,01);
  var days = ee.List.sequence(1, 8);
  var dates = days.map(function(d) {
      return aDate.advance(d, 'month');
  });
  //print(dates,'dates'+j);
  var l5_data = l5_sr.filterDate(dates.get(0),dates.get(1)) 
                    .filterBounds(China_grid) 
                    .map(prepSrL57)
                    .map(prepTm)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l7_data = l7_sr.filterDate(dates.get(0),dates.get(1)) 
                    .filterBounds(China_grid) 
                    .map(prepSrL57)
                    .map(prepTm)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l8_data = l8_sr.filterDate(dates.get(0),dates.get(1)) 
                    .filterBounds(China_grid)
                    .map(prepSrL8)
                    .map(prepOli)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l9_data = l9_sr.filterDate(dates.get(0),dates.get(1)) 
                    .filterBounds(China_grid)
                    .map(prepSrL8)
                    .map(prepOli)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var all_images=l5_data.merge(l7_data).merge(l8_data);
  //var all_images=l7_data;
  //var all_images=l7_data.merge(l8_data);
  var merged_images0 = all_images.median().clip(China_grid).multiply(10000).int16();
  //print(all_images,'all_images');
  //Map.addLayer(merged_images0, {bands:['Red','Green','Blue'],min:0,max:3000}, "merged_images0",false);
  
  //----------1
  var l5_data = l5_sr.filterDate(dates.get(1),dates.get(2)) 
                    .filterBounds(China_grid) 
                    .map(prepSrL57)
                    .map(prepTm)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l7_data = l7_sr.filterDate(dates.get(1),dates.get(2)) 
                    .filterBounds(China_grid) 
                    .map(prepSrL57)
                    .map(prepTm)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l8_data = l8_sr.filterDate(dates.get(1),dates.get(2)) 
                    .filterBounds(China_grid)
                    .map(prepSrL8)
                    .map(prepOli)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l9_data = l9_sr.filterDate(dates.get(1),dates.get(2)) 
                    .filterBounds(China_grid)
                    .map(prepSrL8)
                    .map(prepOli)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var all_images=l5_data.merge(l7_data).merge(l8_data);
  //var all_images=l7_data;
  //var all_images=l7_data.merge(l8_data);
  var merged_images1 = all_images.median().clip(China_grid).multiply(10000).int16();
  //print(merged_images,'merged_images');
  //Map.addLayer(merged_images1, {bands:['Red','Green','Blue'],min:0,max:3000}, "merged_images1",false);
  
  //----------2
  var l5_data = l5_sr.filterDate(dates.get(2),dates.get(3)) 
                    .filterBounds(China_grid) 
                    .map(prepSrL57)
                    .map(prepTm)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l7_data = l7_sr.filterDate(dates.get(2),dates.get(3)) 
                    .filterBounds(China_grid) 
                    .map(prepSrL57)
                    .map(prepTm)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l8_data = l8_sr.filterDate(dates.get(2),dates.get(3)) 
                    .filterBounds(China_grid)
                    .map(prepSrL8)
                    .map(prepOli)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l9_data = l9_sr.filterDate(dates.get(2),dates.get(3)) 
                    .filterBounds(China_grid)
                    .map(prepSrL8)
                    .map(prepOli)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var all_images=l5_data.merge(l7_data).merge(l8_data);
  //var all_images=l7_data;
  //var all_images=l7_data.merge(l8_data);
  var merged_images2 = all_images.median().clip(China_grid).multiply(10000).int16();
  //print(merged_images,'merged_images');
  //Map.addLayer(merged_images2, {bands:['Red','Green','Blue'],min:0,max:3000}, "merged_images2",false);
  
  //----------3
  var l5_data = l5_sr.filterDate(dates.get(3),dates.get(4)) 
                    .filterBounds(China_grid) 
                    .map(prepSrL57)
                    .map(prepTm)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l7_data = l7_sr.filterDate(dates.get(3),dates.get(4)) 
                    .filterBounds(China_grid) 
                    .map(prepSrL57)
                    .map(prepTm)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l8_data = l8_sr.filterDate(dates.get(3),dates.get(4)) 
                    .filterBounds(China_grid)
                    .map(prepSrL8)
                    .map(prepOli)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l9_data = l9_sr.filterDate(dates.get(3),dates.get(4)) 
                    .filterBounds(China_grid)
                    .map(prepSrL8)
                    .map(prepOli)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var all_images=l5_data.merge(l7_data).merge(l8_data);
  //var all_images=l7_data;
  //var all_images=l7_data.merge(l8_data);
  var merged_images3 = all_images.median().clip(China_grid).multiply(10000).int16();
  //print(merged_images,'merged_images');
 // Map.addLayer(merged_images3, {bands:['Red','Green','Blue'],min:0,max:3000}, "merged_images3",false);
  
  //----------4
  var l5_data = l5_sr.filterDate(dates.get(4),dates.get(5)) 
                    .filterBounds(China_grid) 
                    .map(prepSrL57)
                    .map(prepTm)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l7_data = l7_sr.filterDate(dates.get(4),dates.get(5)) 
                    .filterBounds(China_grid) 
                    .map(prepSrL57)
                    .map(prepTm)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l8_data = l8_sr.filterDate(dates.get(4),dates.get(5)) 
                    .filterBounds(China_grid)
                    .map(prepSrL8)
                    .map(prepOli)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l9_data = l9_sr.filterDate(dates.get(4),dates.get(5)) 
                    .filterBounds(China_grid)
                    .map(prepSrL8)
                    .map(prepOli)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var all_images=l5_data.merge(l7_data).merge(l8_data);
  //var all_images=l7_data;
  //var all_images=l7_data.merge(l8_data);
  var merged_images4 = all_images.median().clip(China_grid).multiply(10000).int16();
  //print(merged_images,'merged_images');
  //Map.addLayer(merged_images4, {bands:['Red','Green','Blue'],min:0,max:3000}, "merged_images4",false);
  
  //----------5
  var l5_data = l5_sr.filterDate(dates.get(5),dates.get(6)) 
                    .filterBounds(China_grid) 
                    .map(prepSrL57)
                    .map(prepTm)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l7_data = l7_sr.filterDate(dates.get(5),dates.get(6)) 
                    .filterBounds(China_grid) 
                    .map(prepSrL57)
                    .map(prepTm)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l8_data = l8_sr.filterDate(dates.get(5),dates.get(6)) 
                    .filterBounds(China_grid)
                    .map(prepSrL8)
                    .map(prepOli)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l9_data = l9_sr.filterDate(dates.get(5),dates.get(6)) 
                    .filterBounds(China_grid)
                    .map(prepSrL8)
                    .map(prepOli)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var all_images=l5_data.merge(l7_data).merge(l8_data);
  //var all_images=l7_data;
  //var all_images=l7_data.merge(l8_data);
  var merged_images5 = all_images.median().clip(China_grid).multiply(10000).int16();
  //print(merged_images,'merged_images');
  //Map.addLayer(merged_images5, {bands:['Red','Green','Blue'],min:0,max:3000}, "merged_images5",false);
  
  //----------6
  var l5_data = l5_sr.filterDate(dates.get(6),dates.get(7)) 
                    .filterBounds(China_grid) 
                    .map(prepSrL57)
                    .map(prepTm)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l7_data = l7_sr.filterDate(dates.get(6),dates.get(7)) 
                    .filterBounds(China_grid) 
                    .map(prepSrL57)
                    .map(prepTm)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l8_data = l8_sr.filterDate(dates.get(6),dates.get(7)) 
                    .filterBounds(China_grid)
                    .map(prepSrL8)
                    .map(prepOli)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var l9_data = l9_sr.filterDate(dates.get(6),dates.get(7)) 
                    .filterBounds(China_grid)
                    .map(prepSrL8)
                    .map(prepOli)
                    .map(addWRI)
                    .map(addNDVI)
                    .map(addCI);
                    //.select(s_bands);
  var all_images=l5_data.merge(l7_data).merge(l8_data);
  //var all_images=l7_data;
  //var all_images=l7_data.merge(l8_data);
  var merged_images6 = all_images.median().clip(China_grid).multiply(10000).int16();
  //print(merged_images,'merged_images');
  //Map.addLayer(merged_images6, {bands:['Red','Green','Blue'],min:0,max:3000}, "merged_images6",false);

    for (var i=0; i<23; i++) {             //23  
      //----------0
      var g1=ee.Feature(tp_list.get(i));  
      
      var g1=ee.FeatureCollection(g1);
      //var g2=tp1.filterBounds(g1);
    
      //Map.addLayer(g1, {}, 'g1'+i,false);
      //Map.addLayer(g2, {}, 'g2'+i,false); 
      
      
      //var imageData2=imageData1.updateMask(imageData1.select('B2').lte(1500));
      var p0 = merged_images0.clip(g1).classify(rfclassifier0);
      var p1 = merged_images1.clip(g1).classify(rfclassifier1);
      var p2 = merged_images2.clip(g1).classify(rfclassifier2);
      var p3 = merged_images3.clip(g1).classify(rfclassifier3);
      var p4 = merged_images4.clip(g1).classify(rfclassifier4);
      var p5 = merged_images5.clip(g1).classify(rfclassifier5);
      var p6 = merged_images6.clip(g1).classify(rfclassifier6);
      
      var rape_pro=ee.ImageCollection([p0,p1,p2,p3,p4,p5,p6]).mean().multiply(100);
      var rape_pro=rape_pro.where(slope.gte(30),0);
      var rape_pro=rape_pro.where(srtm.gte(3000),0);
      // Export rapeseed map
      Export.image.toDrive({
      image:rape_pro.toInt8(),
      description: (j+1)+'-rape_pro'+i,
      folder:"China_Landsat_rapeseed_mapping",
      region: g1,
      fileDimensions:51200,
      scale: 30,
      maxPixels: 1e13,
      crs:"EPSG:4326"
      });
    }
}





